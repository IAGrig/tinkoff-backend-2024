/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.pojos;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.OffsetDateTime;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Links implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String url;
    private String domainName;
    private OffsetDateTime registered;
    private OffsetDateTime lastUpdate;
    private OffsetDateTime lastCheck;

    public Links() {}

    public Links(Links value) {
        this.id = value.id;
        this.url = value.url;
        this.domainName = value.domainName;
        this.registered = value.registered;
        this.lastUpdate = value.lastUpdate;
        this.lastCheck = value.lastCheck;
    }

    @ConstructorProperties({ "id", "url", "domainName", "registered", "lastUpdate", "lastCheck" })
    public Links(
        @Nullable Integer id,
        @NotNull String url,
        @NotNull String domainName,
        @Nullable OffsetDateTime registered,
        @Nullable OffsetDateTime lastUpdate,
        @Nullable OffsetDateTime lastCheck
    ) {
        this.id = id;
        this.url = url;
        this.domainName = domainName;
        this.registered = registered;
        this.lastUpdate = lastUpdate;
        this.lastCheck = lastCheck;
    }

    /**
     * Getter for <code>LINKS.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>LINKS.ID</code>.
     */
    public void setId(@Nullable Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(@NotNull String url) {
        this.url = url;
    }

    /**
     * Getter for <code>LINKS.DOMAIN_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 255)
    @NotNull
    public String getDomainName() {
        return this.domainName;
    }

    /**
     * Setter for <code>LINKS.DOMAIN_NAME</code>.
     */
    public void setDomainName(@NotNull String domainName) {
        this.domainName = domainName;
    }

    /**
     * Getter for <code>LINKS.REGISTERED</code>.
     */
    @Nullable
    public OffsetDateTime getRegistered() {
        return this.registered;
    }

    /**
     * Setter for <code>LINKS.REGISTERED</code>.
     */
    public void setRegistered(@Nullable OffsetDateTime registered) {
        this.registered = registered;
    }

    /**
     * Getter for <code>LINKS.LAST_UPDATE</code>.
     */
    @Nullable
    public OffsetDateTime getLastUpdate() {
        return this.lastUpdate;
    }

    /**
     * Setter for <code>LINKS.LAST_UPDATE</code>.
     */
    public void setLastUpdate(@Nullable OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    /**
     * Getter for <code>LINKS.LAST_CHECK</code>.
     */
    @Nullable
    public OffsetDateTime getLastCheck() {
        return this.lastCheck;
    }

    /**
     * Setter for <code>LINKS.LAST_CHECK</code>.
     */
    public void setLastCheck(@Nullable OffsetDateTime lastCheck) {
        this.lastCheck = lastCheck;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Links other = (Links) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.url == null) {
            if (other.url != null)
                return false;
        }
        else if (!this.url.equals(other.url))
            return false;
        if (this.domainName == null) {
            if (other.domainName != null)
                return false;
        }
        else if (!this.domainName.equals(other.domainName))
            return false;
        if (this.registered == null) {
            if (other.registered != null)
                return false;
        }
        else if (!this.registered.equals(other.registered))
            return false;
        if (this.lastUpdate == null) {
            if (other.lastUpdate != null)
                return false;
        }
        else if (!this.lastUpdate.equals(other.lastUpdate))
            return false;
        if (this.lastCheck == null) {
            if (other.lastCheck != null)
                return false;
        }
        else if (!this.lastCheck.equals(other.lastCheck))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.domainName == null) ? 0 : this.domainName.hashCode());
        result = prime * result + ((this.registered == null) ? 0 : this.registered.hashCode());
        result = prime * result + ((this.lastUpdate == null) ? 0 : this.lastUpdate.hashCode());
        result = prime * result + ((this.lastCheck == null) ? 0 : this.lastCheck.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Links (");

        sb.append(id);
        sb.append(", ").append(url);
        sb.append(", ").append(domainName);
        sb.append(", ").append(registered);
        sb.append(", ").append(lastUpdate);
        sb.append(", ").append(lastCheck);

        sb.append(")");
        return sb.toString();
    }
}
