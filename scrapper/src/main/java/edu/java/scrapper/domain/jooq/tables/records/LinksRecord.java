/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;

import edu.java.scrapper.domain.jooq.tables.Links;
import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LinksRecord extends UpdatableRecordImpl<LinksRecord> implements Record6<Integer, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LINKS.ID</code>.
     */
    public void setId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKS.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LINKS.DOMAIN_NAME</code>.
     */
    public void setDomainName(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKS.DOMAIN_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 255)
    @NotNull
    public String getDomainName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>LINKS.REGISTERED</code>.
     */
    public void setRegistered(@Nullable OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINKS.REGISTERED</code>.
     */
    @Nullable
    public OffsetDateTime getRegistered() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>LINKS.LAST_UPDATE</code>.
     */
    public void setLastUpdate(@Nullable OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>LINKS.LAST_UPDATE</code>.
     */
    @Nullable
    public OffsetDateTime getLastUpdate() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>LINKS.LAST_CHECK</code>.
     */
    public void setLastCheck(@Nullable OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>LINKS.LAST_CHECK</code>.
     */
    @Nullable
    public OffsetDateTime getLastCheck() {
        return (OffsetDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<Integer, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row6<Integer, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return Links.LINKS.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Links.LINKS.URL;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return Links.LINKS.DOMAIN_NAME;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return Links.LINKS.REGISTERED;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field5() {
        return Links.LINKS.LAST_UPDATE;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field6() {
        return Links.LINKS.LAST_CHECK;
    }

    @Override
    @Nullable
    public Integer component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUrl();
    }

    @Override
    @NotNull
    public String component3() {
        return getDomainName();
    }

    @Override
    @Nullable
    public OffsetDateTime component4() {
        return getRegistered();
    }

    @Override
    @Nullable
    public OffsetDateTime component5() {
        return getLastUpdate();
    }

    @Override
    @Nullable
    public OffsetDateTime component6() {
        return getLastCheck();
    }

    @Override
    @Nullable
    public Integer value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUrl();
    }

    @Override
    @NotNull
    public String value3() {
        return getDomainName();
    }

    @Override
    @Nullable
    public OffsetDateTime value4() {
        return getRegistered();
    }

    @Override
    @Nullable
    public OffsetDateTime value5() {
        return getLastUpdate();
    }

    @Override
    @Nullable
    public OffsetDateTime value6() {
        return getLastCheck();
    }

    @Override
    @NotNull
    public LinksRecord value1(@Nullable Integer value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value2(@NotNull String value) {
        setUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value3(@NotNull String value) {
        setDomainName(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value4(@Nullable OffsetDateTime value) {
        setRegistered(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value5(@Nullable OffsetDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value6(@Nullable OffsetDateTime value) {
        setLastCheck(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord values(@Nullable Integer value1, @NotNull String value2, @NotNull String value3, @Nullable OffsetDateTime value4, @Nullable OffsetDateTime value5, @Nullable OffsetDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    @ConstructorProperties({ "id", "url", "domainName", "registered", "lastUpdate", "lastCheck" })
    public LinksRecord(@Nullable Integer id, @NotNull String url, @NotNull String domainName, @Nullable OffsetDateTime registered, @Nullable OffsetDateTime lastUpdate, @Nullable OffsetDateTime lastCheck) {
        super(Links.LINKS);

        setId(id);
        setUrl(url);
        setDomainName(domainName);
        setRegistered(registered);
        setLastUpdate(lastUpdate);
        setLastCheck(lastCheck);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(edu.java.scrapper.domain.jooq.tables.pojos.Links value) {
        super(Links.LINKS);

        if (value != null) {
            setId(value.getId());
            setUrl(value.getUrl());
            setDomainName(value.getDomainName());
            setRegistered(value.getRegistered());
            setLastUpdate(value.getLastUpdate());
            setLastCheck(value.getLastCheck());
            resetChangedOnNotNull();
        }
    }
}
